#summary Outlines the Sync API used for intra-server communication
#labels Featured

= Introduction =

The hydraproject Sync API is RESTful, pull-driven and XML friendly.

Each server is solely responsible for keeping its data up to date by making requests to the fellow servers in its "federation".

The following will assume that we are an admin of a hydraproject server that will be running on the domain name 'mongoose.com'.  Any valid domain names on the Internet can of course run THP servers.

= Federated Sites List =

Implementors are free to implement the 'federation list' of trusted sites however they see fit.  In the spec rails app, this is a YAML-encoded file (config/federation.yml.example) that is a list of trusted sites, each with a few required (and optional) fields.

{{{
--- 
- domain: foo.org
  passkey: wafflesandjam69
  api_url: http://foo.org/api
- domain: bar.net
  passkey: pigsinablanket42
  api_url: https://www.bar.net/hydra/api.php
  ip_required: 66.29.132.45
}}}

Required fields:
  * domain - domain name of the remote server
  * passkey - secret password key used for authentication
  * api_url - fully qualified URL of the remote API endpoint (note: secure connections "https" are allowed and encouraged if possible)

Optional field(s):
  * ip_required - The IP Address of the remote client.  If a different IP than the one listed attempts to make a request, it should be denied.

In the above example, our mongoose.com Hydra server has 2 trusted sites in its network, running on domains foo.org and bar.net.  Requests coming from bar.net should originate from the IP 66.29.132.45; the API endpoint URL is secure (*https*) and appears to be running a PHP implementation of hydraserver.

= Function Calling =

Endpoint URLs can be any fully-qualified URL.  Parameters are specified directly after the endpoint URL or as HTTP POST variables.

Examples of acceptable API endpoint URLs:
  * http://foo.org/api
  * http://foo.org/hydra/pickles_and_jam/api.py
  * http://api.foo.org/api/index.php
  * https://foo.org/api
...

API endpoint URLs must *not* contain a question mark ("?") --  as this will be added by the client when building the request URL.

Which API function is being called is specified via the 'method' parameter passed via the URL string as HTTP Get or via HTTP Post.

For example, to call the 'time' method on each of the above examples, we'd call:
  * http://foo.org/api?method=time
  * http://foo.org/hydra/pickles_and_jam/api.py?method=time
  * http://api.foo.org/api/index.php?method=time
  * https://foo.org/api?method=time

= List of Allowed Methods =

The following is the current list of allowed API methods:

['time', 'list_users', 'list_transfer_stats', 'list_torrents', 'get_torrent']

= Authentication =

To authenticate, clients must pass their passkey as an additional request parameter.  Note: passkeys must be unique within a network.

Over a secure, *https* connection, passkeys can be passed via HTTP GET, as in the following:
  * http://foo.org/api?method=time&passkey=bacon420

It is advised though that HTTP POST be used for submitting the 'passkey' parameter to the remote API server.

The following example uses curl to call the time method, passing in the passkey via a POST parameter:
{{{
  curl -d "passkey=bacon420" http://foo.org/api?method=time
}}}

= Time Function = 

This function can be used for debugging and testing (to ensure authentication is working, for example).

*time*

Example request (passkey embedded in URL):
{{{
  curl https://foo.org/api?method=time&passkey=bacon420
}}}

Example request (same as above):
{{{
  curl -d "passkey=bacon420" http://foo.org/api?method=time
}}}

Example response:
{{{
<time>Wed Nov 07 19:53:03 -0800 2007</time>
}}}